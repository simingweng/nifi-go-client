/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// SystemDiagnosticsEntity struct for SystemDiagnosticsEntity
type SystemDiagnosticsEntity struct {
	SystemDiagnostics *SystemDiagnosticsDTO `json:"systemDiagnostics,omitempty"`
}

// NewSystemDiagnosticsEntity instantiates a new SystemDiagnosticsEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemDiagnosticsEntity() *SystemDiagnosticsEntity {
	this := SystemDiagnosticsEntity{}
	return &this
}

// NewSystemDiagnosticsEntityWithDefaults instantiates a new SystemDiagnosticsEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemDiagnosticsEntityWithDefaults() *SystemDiagnosticsEntity {
	this := SystemDiagnosticsEntity{}
	return &this
}

// GetSystemDiagnostics returns the SystemDiagnostics field value if set, zero value otherwise.
func (o *SystemDiagnosticsEntity) GetSystemDiagnostics() SystemDiagnosticsDTO {
	if o == nil || o.SystemDiagnostics == nil {
		var ret SystemDiagnosticsDTO
		return ret
	}
	return *o.SystemDiagnostics
}

// GetSystemDiagnosticsOk returns a tuple with the SystemDiagnostics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemDiagnosticsEntity) GetSystemDiagnosticsOk() (*SystemDiagnosticsDTO, bool) {
	if o == nil || o.SystemDiagnostics == nil {
		return nil, false
	}
	return o.SystemDiagnostics, true
}

// HasSystemDiagnostics returns a boolean if a field has been set.
func (o *SystemDiagnosticsEntity) HasSystemDiagnostics() bool {
	if o != nil && o.SystemDiagnostics != nil {
		return true
	}

	return false
}

// SetSystemDiagnostics gets a reference to the given SystemDiagnosticsDTO and assigns it to the SystemDiagnostics field.
func (o *SystemDiagnosticsEntity) SetSystemDiagnostics(v SystemDiagnosticsDTO) {
	o.SystemDiagnostics = &v
}

func (o SystemDiagnosticsEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SystemDiagnostics != nil {
		toSerialize["systemDiagnostics"] = o.SystemDiagnostics
	}
	return json.Marshal(toSerialize)
}

type NullableSystemDiagnosticsEntity struct {
	value *SystemDiagnosticsEntity
	isSet bool
}

func (v NullableSystemDiagnosticsEntity) Get() *SystemDiagnosticsEntity {
	return v.value
}

func (v *NullableSystemDiagnosticsEntity) Set(val *SystemDiagnosticsEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemDiagnosticsEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemDiagnosticsEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemDiagnosticsEntity(val *SystemDiagnosticsEntity) *NullableSystemDiagnosticsEntity {
	return &NullableSystemDiagnosticsEntity{value: val, isSet: true}
}

func (v NullableSystemDiagnosticsEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemDiagnosticsEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
