/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// CountersDTO struct for CountersDTO
type CountersDTO struct {
	AggregateSnapshot *CountersSnapshotDTO `json:"aggregateSnapshot,omitempty"`
	// A Counters snapshot for each node in the cluster. If the NiFi instance is a standalone instance, rather than a cluster, this may be null.
	NodeSnapshots *[]NodeCountersSnapshotDTO `json:"nodeSnapshots,omitempty"`
}

// NewCountersDTO instantiates a new CountersDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountersDTO() *CountersDTO {
	this := CountersDTO{}
	return &this
}

// NewCountersDTOWithDefaults instantiates a new CountersDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountersDTOWithDefaults() *CountersDTO {
	this := CountersDTO{}
	return &this
}

// GetAggregateSnapshot returns the AggregateSnapshot field value if set, zero value otherwise.
func (o *CountersDTO) GetAggregateSnapshot() CountersSnapshotDTO {
	if o == nil || o.AggregateSnapshot == nil {
		var ret CountersSnapshotDTO
		return ret
	}
	return *o.AggregateSnapshot
}

// GetAggregateSnapshotOk returns a tuple with the AggregateSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountersDTO) GetAggregateSnapshotOk() (*CountersSnapshotDTO, bool) {
	if o == nil || o.AggregateSnapshot == nil {
		return nil, false
	}
	return o.AggregateSnapshot, true
}

// HasAggregateSnapshot returns a boolean if a field has been set.
func (o *CountersDTO) HasAggregateSnapshot() bool {
	if o != nil && o.AggregateSnapshot != nil {
		return true
	}

	return false
}

// SetAggregateSnapshot gets a reference to the given CountersSnapshotDTO and assigns it to the AggregateSnapshot field.
func (o *CountersDTO) SetAggregateSnapshot(v CountersSnapshotDTO) {
	o.AggregateSnapshot = &v
}

// GetNodeSnapshots returns the NodeSnapshots field value if set, zero value otherwise.
func (o *CountersDTO) GetNodeSnapshots() []NodeCountersSnapshotDTO {
	if o == nil || o.NodeSnapshots == nil {
		var ret []NodeCountersSnapshotDTO
		return ret
	}
	return *o.NodeSnapshots
}

// GetNodeSnapshotsOk returns a tuple with the NodeSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountersDTO) GetNodeSnapshotsOk() (*[]NodeCountersSnapshotDTO, bool) {
	if o == nil || o.NodeSnapshots == nil {
		return nil, false
	}
	return o.NodeSnapshots, true
}

// HasNodeSnapshots returns a boolean if a field has been set.
func (o *CountersDTO) HasNodeSnapshots() bool {
	if o != nil && o.NodeSnapshots != nil {
		return true
	}

	return false
}

// SetNodeSnapshots gets a reference to the given []NodeCountersSnapshotDTO and assigns it to the NodeSnapshots field.
func (o *CountersDTO) SetNodeSnapshots(v []NodeCountersSnapshotDTO) {
	o.NodeSnapshots = &v
}

func (o CountersDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AggregateSnapshot != nil {
		toSerialize["aggregateSnapshot"] = o.AggregateSnapshot
	}
	if o.NodeSnapshots != nil {
		toSerialize["nodeSnapshots"] = o.NodeSnapshots
	}
	return json.Marshal(toSerialize)
}

type NullableCountersDTO struct {
	value *CountersDTO
	isSet bool
}

func (v NullableCountersDTO) Get() *CountersDTO {
	return v.value
}

func (v *NullableCountersDTO) Set(val *CountersDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCountersDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCountersDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountersDTO(val *CountersDTO) *NullableCountersDTO {
	return &NullableCountersDTO{value: val, isSet: true}
}

func (v NullableCountersDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountersDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
