/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ProvenanceEntity struct for ProvenanceEntity
type ProvenanceEntity struct {
	Provenance *ProvenanceDTO `json:"provenance,omitempty"`
}

// NewProvenanceEntity instantiates a new ProvenanceEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceEntity() *ProvenanceEntity {
	this := ProvenanceEntity{}
	return &this
}

// NewProvenanceEntityWithDefaults instantiates a new ProvenanceEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceEntityWithDefaults() *ProvenanceEntity {
	this := ProvenanceEntity{}
	return &this
}

// GetProvenance returns the Provenance field value if set, zero value otherwise.
func (o *ProvenanceEntity) GetProvenance() ProvenanceDTO {
	if o == nil || o.Provenance == nil {
		var ret ProvenanceDTO
		return ret
	}
	return *o.Provenance
}

// GetProvenanceOk returns a tuple with the Provenance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEntity) GetProvenanceOk() (*ProvenanceDTO, bool) {
	if o == nil || o.Provenance == nil {
		return nil, false
	}
	return o.Provenance, true
}

// HasProvenance returns a boolean if a field has been set.
func (o *ProvenanceEntity) HasProvenance() bool {
	if o != nil && o.Provenance != nil {
		return true
	}

	return false
}

// SetProvenance gets a reference to the given ProvenanceDTO and assigns it to the Provenance field.
func (o *ProvenanceEntity) SetProvenance(v ProvenanceDTO) {
	o.Provenance = &v
}

func (o ProvenanceEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Provenance != nil {
		toSerialize["provenance"] = o.Provenance
	}
	return json.Marshal(toSerialize)
}

type NullableProvenanceEntity struct {
	value *ProvenanceEntity
	isSet bool
}

func (v NullableProvenanceEntity) Get() *ProvenanceEntity {
	return v.value
}

func (v *NullableProvenanceEntity) Set(val *ProvenanceEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceEntity(val *ProvenanceEntity) *NullableProvenanceEntity {
	return &NullableProvenanceEntity{value: val, isSet: true}
}

func (v NullableProvenanceEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
