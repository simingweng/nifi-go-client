/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// HistoryEntity struct for HistoryEntity
type HistoryEntity struct {
	History *HistoryDTO `json:"history,omitempty"`
}

// NewHistoryEntity instantiates a new HistoryEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistoryEntity() *HistoryEntity {
	this := HistoryEntity{}
	return &this
}

// NewHistoryEntityWithDefaults instantiates a new HistoryEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistoryEntityWithDefaults() *HistoryEntity {
	this := HistoryEntity{}
	return &this
}

// GetHistory returns the History field value if set, zero value otherwise.
func (o *HistoryEntity) GetHistory() HistoryDTO {
	if o == nil || o.History == nil {
		var ret HistoryDTO
		return ret
	}
	return *o.History
}

// GetHistoryOk returns a tuple with the History field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HistoryEntity) GetHistoryOk() (*HistoryDTO, bool) {
	if o == nil || o.History == nil {
		return nil, false
	}
	return o.History, true
}

// HasHistory returns a boolean if a field has been set.
func (o *HistoryEntity) HasHistory() bool {
	if o != nil && o.History != nil {
		return true
	}

	return false
}

// SetHistory gets a reference to the given HistoryDTO and assigns it to the History field.
func (o *HistoryEntity) SetHistory(v HistoryDTO) {
	o.History = &v
}

func (o HistoryEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.History != nil {
		toSerialize["history"] = o.History
	}
	return json.Marshal(toSerialize)
}

type NullableHistoryEntity struct {
	value *HistoryEntity
	isSet bool
}

func (v NullableHistoryEntity) Get() *HistoryEntity {
	return v.value
}

func (v *NullableHistoryEntity) Set(val *HistoryEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableHistoryEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableHistoryEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistoryEntity(val *HistoryEntity) *NullableHistoryEntity {
	return &NullableHistoryEntity{value: val, isSet: true}
}

func (v NullableHistoryEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistoryEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
