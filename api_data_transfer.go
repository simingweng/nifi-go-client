/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DataTransferApiService DataTransferApi service
type DataTransferApiService service

type DataTransferApiApiCommitInputPortTransactionRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	responseCode  *int32
	portId        string
	transactionId string
}

func (r DataTransferApiApiCommitInputPortTransactionRequest) ResponseCode(responseCode int32) DataTransferApiApiCommitInputPortTransactionRequest {
	r.responseCode = &responseCode
	return r
}

func (r DataTransferApiApiCommitInputPortTransactionRequest) Execute() (TransactionResultEntity, *_nethttp.Response, error) {
	return r.ApiService.CommitInputPortTransactionExecute(r)
}

/*
 * CommitInputPortTransaction Commit or cancel the specified transaction
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId The input port id.
 * @param transactionId The transaction id.
 * @return DataTransferApiApiCommitInputPortTransactionRequest
 */
func (a *DataTransferApiService) CommitInputPortTransaction(ctx _context.Context, portId string, transactionId string) DataTransferApiApiCommitInputPortTransactionRequest {
	return DataTransferApiApiCommitInputPortTransactionRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return TransactionResultEntity
 */
func (a *DataTransferApiService) CommitInputPortTransactionExecute(r DataTransferApiApiCommitInputPortTransactionRequest) (TransactionResultEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.CommitInputPortTransaction")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.responseCode == nil {
		return localVarReturnValue, nil, reportError("responseCode is required and must be specified")
	}

	localVarQueryParams.Add("responseCode", parameterToString(*r.responseCode, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiCommitOutputPortTransactionRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	responseCode  *int32
	checksum      *string
	portId        string
	transactionId string
}

func (r DataTransferApiApiCommitOutputPortTransactionRequest) ResponseCode(responseCode int32) DataTransferApiApiCommitOutputPortTransactionRequest {
	r.responseCode = &responseCode
	return r
}
func (r DataTransferApiApiCommitOutputPortTransactionRequest) Checksum(checksum string) DataTransferApiApiCommitOutputPortTransactionRequest {
	r.checksum = &checksum
	return r
}

func (r DataTransferApiApiCommitOutputPortTransactionRequest) Execute() (TransactionResultEntity, *_nethttp.Response, error) {
	return r.ApiService.CommitOutputPortTransactionExecute(r)
}

/*
 * CommitOutputPortTransaction Commit or cancel the specified transaction
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId The output port id.
 * @param transactionId The transaction id.
 * @return DataTransferApiApiCommitOutputPortTransactionRequest
 */
func (a *DataTransferApiService) CommitOutputPortTransaction(ctx _context.Context, portId string, transactionId string) DataTransferApiApiCommitOutputPortTransactionRequest {
	return DataTransferApiApiCommitOutputPortTransactionRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return TransactionResultEntity
 */
func (a *DataTransferApiService) CommitOutputPortTransactionExecute(r DataTransferApiApiCommitOutputPortTransactionRequest) (TransactionResultEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.CommitOutputPortTransaction")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.responseCode == nil {
		return localVarReturnValue, nil, reportError("responseCode is required and must be specified")
	}
	if r.checksum == nil {
		return localVarReturnValue, nil, reportError("checksum is required and must be specified")
	}

	localVarQueryParams.Add("responseCode", parameterToString(*r.responseCode, ""))
	localVarQueryParams.Add("checksum", parameterToString(*r.checksum, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiCreatePortTransactionRequest struct {
	ctx        _context.Context
	ApiService *DataTransferApiService
	portType   string
	portId     string
}

func (r DataTransferApiApiCreatePortTransactionRequest) Execute() (TransactionResultEntity, *_nethttp.Response, error) {
	return r.ApiService.CreatePortTransactionExecute(r)
}

/*
 * CreatePortTransaction Create a transaction to the specified output port or input port
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portType The port type.
 * @param portId
 * @return DataTransferApiApiCreatePortTransactionRequest
 */
func (a *DataTransferApiService) CreatePortTransaction(ctx _context.Context, portType string, portId string) DataTransferApiApiCreatePortTransactionRequest {
	return DataTransferApiApiCreatePortTransactionRequest{
		ApiService: a,
		ctx:        ctx,
		portType:   portType,
		portId:     portId,
	}
}

/*
 * Execute executes the request
 * @return TransactionResultEntity
 */
func (a *DataTransferApiService) CreatePortTransactionExecute(r DataTransferApiApiCreatePortTransactionRequest) (TransactionResultEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.CreatePortTransaction")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/{portType}/{portId}/transactions"
	localVarPath = strings.Replace(localVarPath, "{"+"portType"+"}", _neturl.PathEscape(parameterToString(r.portType, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiExtendInputPortTransactionTTLRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	portId        string
	transactionId string
}

func (r DataTransferApiApiExtendInputPortTransactionTTLRequest) Execute() (TransactionResultEntity, *_nethttp.Response, error) {
	return r.ApiService.ExtendInputPortTransactionTTLExecute(r)
}

/*
 * ExtendInputPortTransactionTTL Extend transaction TTL
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId
 * @param transactionId
 * @return DataTransferApiApiExtendInputPortTransactionTTLRequest
 */
func (a *DataTransferApiService) ExtendInputPortTransactionTTL(ctx _context.Context, portId string, transactionId string) DataTransferApiApiExtendInputPortTransactionTTLRequest {
	return DataTransferApiApiExtendInputPortTransactionTTLRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return TransactionResultEntity
 */
func (a *DataTransferApiService) ExtendInputPortTransactionTTLExecute(r DataTransferApiApiExtendInputPortTransactionTTLRequest) (TransactionResultEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.ExtendInputPortTransactionTTL")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiExtendOutputPortTransactionTTLRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	portId        string
	transactionId string
}

func (r DataTransferApiApiExtendOutputPortTransactionTTLRequest) Execute() (TransactionResultEntity, *_nethttp.Response, error) {
	return r.ApiService.ExtendOutputPortTransactionTTLExecute(r)
}

/*
 * ExtendOutputPortTransactionTTL Extend transaction TTL
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId
 * @param transactionId
 * @return DataTransferApiApiExtendOutputPortTransactionTTLRequest
 */
func (a *DataTransferApiService) ExtendOutputPortTransactionTTL(ctx _context.Context, portId string, transactionId string) DataTransferApiApiExtendOutputPortTransactionTTLRequest {
	return DataTransferApiApiExtendOutputPortTransactionTTLRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return TransactionResultEntity
 */
func (a *DataTransferApiService) ExtendOutputPortTransactionTTLExecute(r DataTransferApiApiExtendOutputPortTransactionTTLRequest) (TransactionResultEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  TransactionResultEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.ExtendOutputPortTransactionTTL")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiReceiveFlowFilesRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	portId        string
	transactionId string
}

func (r DataTransferApiApiReceiveFlowFilesRequest) Execute() (string, *_nethttp.Response, error) {
	return r.ApiService.ReceiveFlowFilesExecute(r)
}

/*
 * ReceiveFlowFiles Transfer flow files to the input port
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId The input port id.
 * @param transactionId
 * @return DataTransferApiApiReceiveFlowFilesRequest
 */
func (a *DataTransferApiService) ReceiveFlowFiles(ctx _context.Context, portId string, transactionId string) DataTransferApiApiReceiveFlowFilesRequest {
	return DataTransferApiApiReceiveFlowFilesRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return string
 */
func (a *DataTransferApiService) ReceiveFlowFilesExecute(r DataTransferApiApiReceiveFlowFilesRequest) (string, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.ReceiveFlowFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/input-ports/{portId}/transactions/{transactionId}/flow-files"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DataTransferApiApiTransferFlowFilesRequest struct {
	ctx           _context.Context
	ApiService    *DataTransferApiService
	portId        string
	transactionId string
}

func (r DataTransferApiApiTransferFlowFilesRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.TransferFlowFilesExecute(r)
}

/*
 * TransferFlowFiles Transfer flow files from the output port
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param portId The output port id.
 * @param transactionId
 * @return DataTransferApiApiTransferFlowFilesRequest
 */
func (a *DataTransferApiService) TransferFlowFiles(ctx _context.Context, portId string, transactionId string) DataTransferApiApiTransferFlowFilesRequest {
	return DataTransferApiApiTransferFlowFilesRequest{
		ApiService:    a,
		ctx:           ctx,
		portId:        portId,
		transactionId: transactionId,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *DataTransferApiService) TransferFlowFilesExecute(r DataTransferApiApiTransferFlowFilesRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DataTransferApiService.TransferFlowFiles")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-transfer/output-ports/{portId}/transactions/{transactionId}/flow-files"
	localVarPath = strings.Replace(localVarPath, "{"+"portId"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"transactionId"+"}", _neturl.PathEscape(parameterToString(r.transactionId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/octet-stream"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
