/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// AccessConfigurationEntity struct for AccessConfigurationEntity
type AccessConfigurationEntity struct {
	Config *AccessConfigurationDTO `json:"config,omitempty"`
}

// NewAccessConfigurationEntity instantiates a new AccessConfigurationEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessConfigurationEntity() *AccessConfigurationEntity {
	this := AccessConfigurationEntity{}
	return &this
}

// NewAccessConfigurationEntityWithDefaults instantiates a new AccessConfigurationEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessConfigurationEntityWithDefaults() *AccessConfigurationEntity {
	this := AccessConfigurationEntity{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *AccessConfigurationEntity) GetConfig() AccessConfigurationDTO {
	if o == nil || o.Config == nil {
		var ret AccessConfigurationDTO
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessConfigurationEntity) GetConfigOk() (*AccessConfigurationDTO, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *AccessConfigurationEntity) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given AccessConfigurationDTO and assigns it to the Config field.
func (o *AccessConfigurationEntity) SetConfig(v AccessConfigurationDTO) {
	o.Config = &v
}

func (o AccessConfigurationEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	return json.Marshal(toSerialize)
}

type NullableAccessConfigurationEntity struct {
	value *AccessConfigurationEntity
	isSet bool
}

func (v NullableAccessConfigurationEntity) Get() *AccessConfigurationEntity {
	return v.value
}

func (v *NullableAccessConfigurationEntity) Set(val *AccessConfigurationEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessConfigurationEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessConfigurationEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessConfigurationEntity(val *AccessConfigurationEntity) *NullableAccessConfigurationEntity {
	return &NullableAccessConfigurationEntity{value: val, isSet: true}
}

func (v NullableAccessConfigurationEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessConfigurationEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
