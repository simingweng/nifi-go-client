/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// NodeEntity struct for NodeEntity
type NodeEntity struct {
	Node *NodeDTO `json:"node,omitempty"`
}

// NewNodeEntity instantiates a new NodeEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeEntity() *NodeEntity {
	this := NodeEntity{}
	return &this
}

// NewNodeEntityWithDefaults instantiates a new NodeEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeEntityWithDefaults() *NodeEntity {
	this := NodeEntity{}
	return &this
}

// GetNode returns the Node field value if set, zero value otherwise.
func (o *NodeEntity) GetNode() NodeDTO {
	if o == nil || o.Node == nil {
		var ret NodeDTO
		return ret
	}
	return *o.Node
}

// GetNodeOk returns a tuple with the Node field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEntity) GetNodeOk() (*NodeDTO, bool) {
	if o == nil || o.Node == nil {
		return nil, false
	}
	return o.Node, true
}

// HasNode returns a boolean if a field has been set.
func (o *NodeEntity) HasNode() bool {
	if o != nil && o.Node != nil {
		return true
	}

	return false
}

// SetNode gets a reference to the given NodeDTO and assigns it to the Node field.
func (o *NodeEntity) SetNode(v NodeDTO) {
	o.Node = &v
}

func (o NodeEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Node != nil {
		toSerialize["node"] = o.Node
	}
	return json.Marshal(toSerialize)
}

type NullableNodeEntity struct {
	value *NodeEntity
	isSet bool
}

func (v NullableNodeEntity) Get() *NodeEntity {
	return v.value
}

func (v *NullableNodeEntity) Set(val *NodeEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeEntity(val *NodeEntity) *NullableNodeEntity {
	return &NullableNodeEntity{value: val, isSet: true}
}

func (v NullableNodeEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
