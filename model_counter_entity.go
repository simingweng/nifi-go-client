/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// CounterEntity struct for CounterEntity
type CounterEntity struct {
	Counter *CounterDTO `json:"counter,omitempty"`
}

// NewCounterEntity instantiates a new CounterEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCounterEntity() *CounterEntity {
	this := CounterEntity{}
	return &this
}

// NewCounterEntityWithDefaults instantiates a new CounterEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCounterEntityWithDefaults() *CounterEntity {
	this := CounterEntity{}
	return &this
}

// GetCounter returns the Counter field value if set, zero value otherwise.
func (o *CounterEntity) GetCounter() CounterDTO {
	if o == nil || o.Counter == nil {
		var ret CounterDTO
		return ret
	}
	return *o.Counter
}

// GetCounterOk returns a tuple with the Counter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CounterEntity) GetCounterOk() (*CounterDTO, bool) {
	if o == nil || o.Counter == nil {
		return nil, false
	}
	return o.Counter, true
}

// HasCounter returns a boolean if a field has been set.
func (o *CounterEntity) HasCounter() bool {
	if o != nil && o.Counter != nil {
		return true
	}

	return false
}

// SetCounter gets a reference to the given CounterDTO and assigns it to the Counter field.
func (o *CounterEntity) SetCounter(v CounterDTO) {
	o.Counter = &v
}

func (o CounterEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Counter != nil {
		toSerialize["counter"] = o.Counter
	}
	return json.Marshal(toSerialize)
}

type NullableCounterEntity struct {
	value *CounterEntity
	isSet bool
}

func (v NullableCounterEntity) Get() *CounterEntity {
	return v.value
}

func (v *NullableCounterEntity) Set(val *CounterEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableCounterEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableCounterEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCounterEntity(val *CounterEntity) *NullableCounterEntity {
	return &NullableCounterEntity{value: val, isSet: true}
}

func (v NullableCounterEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCounterEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
