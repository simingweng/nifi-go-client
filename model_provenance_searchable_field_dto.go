/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ProvenanceSearchableFieldDTO struct for ProvenanceSearchableFieldDTO
type ProvenanceSearchableFieldDTO struct {
	// The id of the searchable field.
	Id *string `json:"id,omitempty"`
	// The searchable field.
	Field *string `json:"field,omitempty"`
	// The label for the searchable field.
	Label *string `json:"label,omitempty"`
	// The type of the searchable field.
	Type *string `json:"type,omitempty"`
}

// NewProvenanceSearchableFieldDTO instantiates a new ProvenanceSearchableFieldDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceSearchableFieldDTO() *ProvenanceSearchableFieldDTO {
	this := ProvenanceSearchableFieldDTO{}
	return &this
}

// NewProvenanceSearchableFieldDTOWithDefaults instantiates a new ProvenanceSearchableFieldDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceSearchableFieldDTOWithDefaults() *ProvenanceSearchableFieldDTO {
	this := ProvenanceSearchableFieldDTO{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProvenanceSearchableFieldDTO) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceSearchableFieldDTO) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProvenanceSearchableFieldDTO) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProvenanceSearchableFieldDTO) SetId(v string) {
	o.Id = &v
}

// GetField returns the Field field value if set, zero value otherwise.
func (o *ProvenanceSearchableFieldDTO) GetField() string {
	if o == nil || o.Field == nil {
		var ret string
		return ret
	}
	return *o.Field
}

// GetFieldOk returns a tuple with the Field field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceSearchableFieldDTO) GetFieldOk() (*string, bool) {
	if o == nil || o.Field == nil {
		return nil, false
	}
	return o.Field, true
}

// HasField returns a boolean if a field has been set.
func (o *ProvenanceSearchableFieldDTO) HasField() bool {
	if o != nil && o.Field != nil {
		return true
	}

	return false
}

// SetField gets a reference to the given string and assigns it to the Field field.
func (o *ProvenanceSearchableFieldDTO) SetField(v string) {
	o.Field = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *ProvenanceSearchableFieldDTO) GetLabel() string {
	if o == nil || o.Label == nil {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceSearchableFieldDTO) GetLabelOk() (*string, bool) {
	if o == nil || o.Label == nil {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *ProvenanceSearchableFieldDTO) HasLabel() bool {
	if o != nil && o.Label != nil {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *ProvenanceSearchableFieldDTO) SetLabel(v string) {
	o.Label = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ProvenanceSearchableFieldDTO) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceSearchableFieldDTO) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ProvenanceSearchableFieldDTO) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ProvenanceSearchableFieldDTO) SetType(v string) {
	o.Type = &v
}

func (o ProvenanceSearchableFieldDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Field != nil {
		toSerialize["field"] = o.Field
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableProvenanceSearchableFieldDTO struct {
	value *ProvenanceSearchableFieldDTO
	isSet bool
}

func (v NullableProvenanceSearchableFieldDTO) Get() *ProvenanceSearchableFieldDTO {
	return v.value
}

func (v *NullableProvenanceSearchableFieldDTO) Set(val *ProvenanceSearchableFieldDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceSearchableFieldDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceSearchableFieldDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceSearchableFieldDTO(val *ProvenanceSearchableFieldDTO) *NullableProvenanceSearchableFieldDTO {
	return &NullableProvenanceSearchableFieldDTO{value: val, isSet: true}
}

func (v NullableProvenanceSearchableFieldDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceSearchableFieldDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
