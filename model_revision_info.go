/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// RevisionInfo The revision information for an entity managed through the REST API.
type RevisionInfo struct {
	// A client identifier used to make a request. By including a client identifier, the API can allow multiple requests without needing the current revision. Due to the asynchronous nature of requests/responses this was implemented to allow the client to make numerous requests without having to wait for the previous response to come back.
	ClientId *string `json:"clientId,omitempty"`
	// NiFi Registry employs an optimistic locking strategy where the client must include a revision in their request when performing an update. In a response to a mutable flow request, this field represents the updated base version.
	Version *int64 `json:"version,omitempty"`
	// The user that last modified the entity.
	LastModifier *string `json:"lastModifier,omitempty"`
}

// NewRevisionInfo instantiates a new RevisionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevisionInfo() *RevisionInfo {
	this := RevisionInfo{}
	return &this
}

// NewRevisionInfoWithDefaults instantiates a new RevisionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevisionInfoWithDefaults() *RevisionInfo {
	this := RevisionInfo{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *RevisionInfo) GetClientId() string {
	if o == nil || o.ClientId == nil {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionInfo) GetClientIdOk() (*string, bool) {
	if o == nil || o.ClientId == nil {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *RevisionInfo) HasClientId() bool {
	if o != nil && o.ClientId != nil {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *RevisionInfo) SetClientId(v string) {
	o.ClientId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *RevisionInfo) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionInfo) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *RevisionInfo) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *RevisionInfo) SetVersion(v int64) {
	o.Version = &v
}

// GetLastModifier returns the LastModifier field value if set, zero value otherwise.
func (o *RevisionInfo) GetLastModifier() string {
	if o == nil || o.LastModifier == nil {
		var ret string
		return ret
	}
	return *o.LastModifier
}

// GetLastModifierOk returns a tuple with the LastModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RevisionInfo) GetLastModifierOk() (*string, bool) {
	if o == nil || o.LastModifier == nil {
		return nil, false
	}
	return o.LastModifier, true
}

// HasLastModifier returns a boolean if a field has been set.
func (o *RevisionInfo) HasLastModifier() bool {
	if o != nil && o.LastModifier != nil {
		return true
	}

	return false
}

// SetLastModifier gets a reference to the given string and assigns it to the LastModifier field.
func (o *RevisionInfo) SetLastModifier(v string) {
	o.LastModifier = &v
}

func (o RevisionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientId != nil {
		toSerialize["clientId"] = o.ClientId
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	if o.LastModifier != nil {
		toSerialize["lastModifier"] = o.LastModifier
	}
	return json.Marshal(toSerialize)
}

type NullableRevisionInfo struct {
	value *RevisionInfo
	isSet bool
}

func (v NullableRevisionInfo) Get() *RevisionInfo {
	return v.value
}

func (v *NullableRevisionInfo) Set(val *RevisionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRevisionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRevisionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevisionInfo(val *RevisionInfo) *NullableRevisionInfo {
	return &NullableRevisionInfo{value: val, isSet: true}
}

func (v NullableRevisionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevisionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
