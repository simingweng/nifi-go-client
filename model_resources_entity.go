/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ResourcesEntity struct for ResourcesEntity
type ResourcesEntity struct {
	Resources *[]ResourceDTO `json:"resources,omitempty"`
}

// NewResourcesEntity instantiates a new ResourcesEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourcesEntity() *ResourcesEntity {
	this := ResourcesEntity{}
	return &this
}

// NewResourcesEntityWithDefaults instantiates a new ResourcesEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourcesEntityWithDefaults() *ResourcesEntity {
	this := ResourcesEntity{}
	return &this
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *ResourcesEntity) GetResources() []ResourceDTO {
	if o == nil || o.Resources == nil {
		var ret []ResourceDTO
		return ret
	}
	return *o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourcesEntity) GetResourcesOk() (*[]ResourceDTO, bool) {
	if o == nil || o.Resources == nil {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *ResourcesEntity) HasResources() bool {
	if o != nil && o.Resources != nil {
		return true
	}

	return false
}

// SetResources gets a reference to the given []ResourceDTO and assigns it to the Resources field.
func (o *ResourcesEntity) SetResources(v []ResourceDTO) {
	o.Resources = &v
}

func (o ResourcesEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Resources != nil {
		toSerialize["resources"] = o.Resources
	}
	return json.Marshal(toSerialize)
}

type NullableResourcesEntity struct {
	value *ResourcesEntity
	isSet bool
}

func (v NullableResourcesEntity) Get() *ResourcesEntity {
	return v.value
}

func (v *NullableResourcesEntity) Set(val *ResourcesEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableResourcesEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableResourcesEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourcesEntity(val *ResourcesEntity) *NullableResourcesEntity {
	return &NullableResourcesEntity{value: val, isSet: true}
}

func (v NullableResourcesEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourcesEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
