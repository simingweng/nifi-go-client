/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ControllerServiceReferencingComponentsEntity struct for ControllerServiceReferencingComponentsEntity
type ControllerServiceReferencingComponentsEntity struct {
	ControllerServiceReferencingComponents *[]ControllerServiceReferencingComponentEntity `json:"controllerServiceReferencingComponents,omitempty"`
}

// NewControllerServiceReferencingComponentsEntity instantiates a new ControllerServiceReferencingComponentsEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewControllerServiceReferencingComponentsEntity() *ControllerServiceReferencingComponentsEntity {
	this := ControllerServiceReferencingComponentsEntity{}
	return &this
}

// NewControllerServiceReferencingComponentsEntityWithDefaults instantiates a new ControllerServiceReferencingComponentsEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewControllerServiceReferencingComponentsEntityWithDefaults() *ControllerServiceReferencingComponentsEntity {
	this := ControllerServiceReferencingComponentsEntity{}
	return &this
}

// GetControllerServiceReferencingComponents returns the ControllerServiceReferencingComponents field value if set, zero value otherwise.
func (o *ControllerServiceReferencingComponentsEntity) GetControllerServiceReferencingComponents() []ControllerServiceReferencingComponentEntity {
	if o == nil || o.ControllerServiceReferencingComponents == nil {
		var ret []ControllerServiceReferencingComponentEntity
		return ret
	}
	return *o.ControllerServiceReferencingComponents
}

// GetControllerServiceReferencingComponentsOk returns a tuple with the ControllerServiceReferencingComponents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ControllerServiceReferencingComponentsEntity) GetControllerServiceReferencingComponentsOk() (*[]ControllerServiceReferencingComponentEntity, bool) {
	if o == nil || o.ControllerServiceReferencingComponents == nil {
		return nil, false
	}
	return o.ControllerServiceReferencingComponents, true
}

// HasControllerServiceReferencingComponents returns a boolean if a field has been set.
func (o *ControllerServiceReferencingComponentsEntity) HasControllerServiceReferencingComponents() bool {
	if o != nil && o.ControllerServiceReferencingComponents != nil {
		return true
	}

	return false
}

// SetControllerServiceReferencingComponents gets a reference to the given []ControllerServiceReferencingComponentEntity and assigns it to the ControllerServiceReferencingComponents field.
func (o *ControllerServiceReferencingComponentsEntity) SetControllerServiceReferencingComponents(v []ControllerServiceReferencingComponentEntity) {
	o.ControllerServiceReferencingComponents = &v
}

func (o ControllerServiceReferencingComponentsEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ControllerServiceReferencingComponents != nil {
		toSerialize["controllerServiceReferencingComponents"] = o.ControllerServiceReferencingComponents
	}
	return json.Marshal(toSerialize)
}

type NullableControllerServiceReferencingComponentsEntity struct {
	value *ControllerServiceReferencingComponentsEntity
	isSet bool
}

func (v NullableControllerServiceReferencingComponentsEntity) Get() *ControllerServiceReferencingComponentsEntity {
	return v.value
}

func (v *NullableControllerServiceReferencingComponentsEntity) Set(val *ControllerServiceReferencingComponentsEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableControllerServiceReferencingComponentsEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableControllerServiceReferencingComponentsEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableControllerServiceReferencingComponentsEntity(val *ControllerServiceReferencingComponentsEntity) *NullableControllerServiceReferencingComponentsEntity {
	return &NullableControllerServiceReferencingComponentsEntity{value: val, isSet: true}
}

func (v NullableControllerServiceReferencingComponentsEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableControllerServiceReferencingComponentsEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
