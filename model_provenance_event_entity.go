/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ProvenanceEventEntity struct for ProvenanceEventEntity
type ProvenanceEventEntity struct {
	ProvenanceEvent *ProvenanceEventDTO `json:"provenanceEvent,omitempty"`
}

// NewProvenanceEventEntity instantiates a new ProvenanceEventEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProvenanceEventEntity() *ProvenanceEventEntity {
	this := ProvenanceEventEntity{}
	return &this
}

// NewProvenanceEventEntityWithDefaults instantiates a new ProvenanceEventEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProvenanceEventEntityWithDefaults() *ProvenanceEventEntity {
	this := ProvenanceEventEntity{}
	return &this
}

// GetProvenanceEvent returns the ProvenanceEvent field value if set, zero value otherwise.
func (o *ProvenanceEventEntity) GetProvenanceEvent() ProvenanceEventDTO {
	if o == nil || o.ProvenanceEvent == nil {
		var ret ProvenanceEventDTO
		return ret
	}
	return *o.ProvenanceEvent
}

// GetProvenanceEventOk returns a tuple with the ProvenanceEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProvenanceEventEntity) GetProvenanceEventOk() (*ProvenanceEventDTO, bool) {
	if o == nil || o.ProvenanceEvent == nil {
		return nil, false
	}
	return o.ProvenanceEvent, true
}

// HasProvenanceEvent returns a boolean if a field has been set.
func (o *ProvenanceEventEntity) HasProvenanceEvent() bool {
	if o != nil && o.ProvenanceEvent != nil {
		return true
	}

	return false
}

// SetProvenanceEvent gets a reference to the given ProvenanceEventDTO and assigns it to the ProvenanceEvent field.
func (o *ProvenanceEventEntity) SetProvenanceEvent(v ProvenanceEventDTO) {
	o.ProvenanceEvent = &v
}

func (o ProvenanceEventEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProvenanceEvent != nil {
		toSerialize["provenanceEvent"] = o.ProvenanceEvent
	}
	return json.Marshal(toSerialize)
}

type NullableProvenanceEventEntity struct {
	value *ProvenanceEventEntity
	isSet bool
}

func (v NullableProvenanceEventEntity) Get() *ProvenanceEventEntity {
	return v.value
}

func (v *NullableProvenanceEventEntity) Set(val *ProvenanceEventEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableProvenanceEventEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableProvenanceEventEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProvenanceEventEntity(val *ProvenanceEventEntity) *NullableProvenanceEventEntity {
	return &NullableProvenanceEventEntity{value: val, isSet: true}
}

func (v NullableProvenanceEventEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProvenanceEventEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
