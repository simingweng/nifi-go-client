/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// ResourceDTO struct for ResourceDTO
type ResourceDTO struct {
	// The identifier of the resource.
	Identifier *string `json:"identifier,omitempty"`
	// The name of the resource.
	Name *string `json:"name,omitempty"`
}

// NewResourceDTO instantiates a new ResourceDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceDTO() *ResourceDTO {
	this := ResourceDTO{}
	return &this
}

// NewResourceDTOWithDefaults instantiates a new ResourceDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceDTOWithDefaults() *ResourceDTO {
	this := ResourceDTO{}
	return &this
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *ResourceDTO) GetIdentifier() string {
	if o == nil || o.Identifier == nil {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDTO) GetIdentifierOk() (*string, bool) {
	if o == nil || o.Identifier == nil {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ResourceDTO) HasIdentifier() bool {
	if o != nil && o.Identifier != nil {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *ResourceDTO) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ResourceDTO) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceDTO) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ResourceDTO) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ResourceDTO) SetName(v string) {
	o.Name = &v
}

func (o ResourceDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Identifier != nil {
		toSerialize["identifier"] = o.Identifier
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableResourceDTO struct {
	value *ResourceDTO
	isSet bool
}

func (v NullableResourceDTO) Get() *ResourceDTO {
	return v.value
}

func (v *NullableResourceDTO) Set(val *ResourceDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceDTO(val *ResourceDTO) *NullableResourceDTO {
	return &NullableResourceDTO{value: val, isSet: true}
}

func (v NullableResourceDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
