/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// FlowfileQueuesApiService FlowfileQueuesApi service
type FlowfileQueuesApiService service

type FlowfileQueuesApiApiCreateDropRequestRequest struct {
	ctx        _context.Context
	ApiService *FlowfileQueuesApiService
	id         string
}

func (r FlowfileQueuesApiApiCreateDropRequestRequest) Execute() (DropRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.CreateDropRequestExecute(r)
}

/*
 * CreateDropRequest Creates a request to drop the contents of the queue in this connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @return FlowfileQueuesApiApiCreateDropRequestRequest
 */
func (a *FlowfileQueuesApiService) CreateDropRequest(ctx _context.Context, id string) FlowfileQueuesApiApiCreateDropRequestRequest {
	return FlowfileQueuesApiApiCreateDropRequestRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return DropRequestEntity
 */
func (a *FlowfileQueuesApiService) CreateDropRequestExecute(r FlowfileQueuesApiApiCreateDropRequestRequest) (DropRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DropRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.CreateDropRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/drop-requests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiCreateFlowFileListingRequest struct {
	ctx        _context.Context
	ApiService *FlowfileQueuesApiService
	id         string
}

func (r FlowfileQueuesApiApiCreateFlowFileListingRequest) Execute() (ListingRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.CreateFlowFileListingExecute(r)
}

/*
 * CreateFlowFileListing Lists the contents of the queue in this connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @return FlowfileQueuesApiApiCreateFlowFileListingRequest
 */
func (a *FlowfileQueuesApiService) CreateFlowFileListing(ctx _context.Context, id string) FlowfileQueuesApiApiCreateFlowFileListingRequest {
	return FlowfileQueuesApiApiCreateFlowFileListingRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ListingRequestEntity
 */
func (a *FlowfileQueuesApiService) CreateFlowFileListingExecute(r FlowfileQueuesApiApiCreateFlowFileListingRequest) (ListingRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListingRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.CreateFlowFileListing")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/listing-requests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiDeleteListingRequestRequest struct {
	ctx              _context.Context
	ApiService       *FlowfileQueuesApiService
	id               string
	listingRequestId string
}

func (r FlowfileQueuesApiApiDeleteListingRequestRequest) Execute() (ListingRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.DeleteListingRequestExecute(r)
}

/*
 * DeleteListingRequest Cancels and/or removes a request to list the contents of this connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param listingRequestId The listing request id.
 * @return FlowfileQueuesApiApiDeleteListingRequestRequest
 */
func (a *FlowfileQueuesApiService) DeleteListingRequest(ctx _context.Context, id string, listingRequestId string) FlowfileQueuesApiApiDeleteListingRequestRequest {
	return FlowfileQueuesApiApiDeleteListingRequestRequest{
		ApiService:       a,
		ctx:              ctx,
		id:               id,
		listingRequestId: listingRequestId,
	}
}

/*
 * Execute executes the request
 * @return ListingRequestEntity
 */
func (a *FlowfileQueuesApiService) DeleteListingRequestExecute(r FlowfileQueuesApiApiDeleteListingRequestRequest) (ListingRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListingRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.DeleteListingRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/listing-requests/{listing-request-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listing-request-id"+"}", _neturl.PathEscape(parameterToString(r.listingRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiDownloadFlowFileContentRequest struct {
	ctx           _context.Context
	ApiService    *FlowfileQueuesApiService
	id            string
	flowfileUuid  string
	clientId      *string
	clusterNodeId *string
}

func (r FlowfileQueuesApiApiDownloadFlowFileContentRequest) ClientId(clientId string) FlowfileQueuesApiApiDownloadFlowFileContentRequest {
	r.clientId = &clientId
	return r
}
func (r FlowfileQueuesApiApiDownloadFlowFileContentRequest) ClusterNodeId(clusterNodeId string) FlowfileQueuesApiApiDownloadFlowFileContentRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r FlowfileQueuesApiApiDownloadFlowFileContentRequest) Execute() (map[string]interface{}, *_nethttp.Response, error) {
	return r.ApiService.DownloadFlowFileContentExecute(r)
}

/*
 * DownloadFlowFileContent Gets the content for a FlowFile in a Connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param flowfileUuid The flowfile uuid.
 * @return FlowfileQueuesApiApiDownloadFlowFileContentRequest
 */
func (a *FlowfileQueuesApiService) DownloadFlowFileContent(ctx _context.Context, id string, flowfileUuid string) FlowfileQueuesApiApiDownloadFlowFileContentRequest {
	return FlowfileQueuesApiApiDownloadFlowFileContentRequest{
		ApiService:   a,
		ctx:          ctx,
		id:           id,
		flowfileUuid: flowfileUuid,
	}
}

/*
 * Execute executes the request
 * @return map[string]interface{}
 */
func (a *FlowfileQueuesApiService) DownloadFlowFileContentExecute(r FlowfileQueuesApiApiDownloadFlowFileContentRequest) (map[string]interface{}, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  map[string]interface{}
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.DownloadFlowFileContent")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}/content"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowfile-uuid"+"}", _neturl.PathEscape(parameterToString(r.flowfileUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.clientId != nil {
		localVarQueryParams.Add("clientId", parameterToString(*r.clientId, ""))
	}
	if r.clusterNodeId != nil {
		localVarQueryParams.Add("clusterNodeId", parameterToString(*r.clusterNodeId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"*/*"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiGetDropRequestRequest struct {
	ctx           _context.Context
	ApiService    *FlowfileQueuesApiService
	id            string
	dropRequestId string
}

func (r FlowfileQueuesApiApiGetDropRequestRequest) Execute() (DropRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.GetDropRequestExecute(r)
}

/*
 * GetDropRequest Gets the current status of a drop request for the specified connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param dropRequestId The drop request id.
 * @return FlowfileQueuesApiApiGetDropRequestRequest
 */
func (a *FlowfileQueuesApiService) GetDropRequest(ctx _context.Context, id string, dropRequestId string) FlowfileQueuesApiApiGetDropRequestRequest {
	return FlowfileQueuesApiApiGetDropRequestRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		dropRequestId: dropRequestId,
	}
}

/*
 * Execute executes the request
 * @return DropRequestEntity
 */
func (a *FlowfileQueuesApiService) GetDropRequestExecute(r FlowfileQueuesApiApiGetDropRequestRequest) (DropRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DropRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.GetDropRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/drop-requests/{drop-request-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"drop-request-id"+"}", _neturl.PathEscape(parameterToString(r.dropRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiGetFlowFileRequest struct {
	ctx           _context.Context
	ApiService    *FlowfileQueuesApiService
	id            string
	flowfileUuid  string
	clusterNodeId *string
}

func (r FlowfileQueuesApiApiGetFlowFileRequest) ClusterNodeId(clusterNodeId string) FlowfileQueuesApiApiGetFlowFileRequest {
	r.clusterNodeId = &clusterNodeId
	return r
}

func (r FlowfileQueuesApiApiGetFlowFileRequest) Execute() (FlowFileEntity, *_nethttp.Response, error) {
	return r.ApiService.GetFlowFileExecute(r)
}

/*
 * GetFlowFile Gets a FlowFile from a Connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param flowfileUuid The flowfile uuid.
 * @return FlowfileQueuesApiApiGetFlowFileRequest
 */
func (a *FlowfileQueuesApiService) GetFlowFile(ctx _context.Context, id string, flowfileUuid string) FlowfileQueuesApiApiGetFlowFileRequest {
	return FlowfileQueuesApiApiGetFlowFileRequest{
		ApiService:   a,
		ctx:          ctx,
		id:           id,
		flowfileUuid: flowfileUuid,
	}
}

/*
 * Execute executes the request
 * @return FlowFileEntity
 */
func (a *FlowfileQueuesApiService) GetFlowFileExecute(r FlowfileQueuesApiApiGetFlowFileRequest) (FlowFileEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  FlowFileEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.GetFlowFile")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/flowfiles/{flowfile-uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"flowfile-uuid"+"}", _neturl.PathEscape(parameterToString(r.flowfileUuid, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.clusterNodeId != nil {
		localVarQueryParams.Add("clusterNodeId", parameterToString(*r.clusterNodeId, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiGetListingRequestRequest struct {
	ctx              _context.Context
	ApiService       *FlowfileQueuesApiService
	id               string
	listingRequestId string
}

func (r FlowfileQueuesApiApiGetListingRequestRequest) Execute() (ListingRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.GetListingRequestExecute(r)
}

/*
 * GetListingRequest Gets the current status of a listing request for the specified connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param listingRequestId The listing request id.
 * @return FlowfileQueuesApiApiGetListingRequestRequest
 */
func (a *FlowfileQueuesApiService) GetListingRequest(ctx _context.Context, id string, listingRequestId string) FlowfileQueuesApiApiGetListingRequestRequest {
	return FlowfileQueuesApiApiGetListingRequestRequest{
		ApiService:       a,
		ctx:              ctx,
		id:               id,
		listingRequestId: listingRequestId,
	}
}

/*
 * Execute executes the request
 * @return ListingRequestEntity
 */
func (a *FlowfileQueuesApiService) GetListingRequestExecute(r FlowfileQueuesApiApiGetListingRequestRequest) (ListingRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ListingRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.GetListingRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/listing-requests/{listing-request-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"listing-request-id"+"}", _neturl.PathEscape(parameterToString(r.listingRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type FlowfileQueuesApiApiRemoveDropRequestRequest struct {
	ctx           _context.Context
	ApiService    *FlowfileQueuesApiService
	id            string
	dropRequestId string
}

func (r FlowfileQueuesApiApiRemoveDropRequestRequest) Execute() (DropRequestEntity, *_nethttp.Response, error) {
	return r.ApiService.RemoveDropRequestExecute(r)
}

/*
 * RemoveDropRequest Cancels and/or removes a request to drop the contents of this connection.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The connection id.
 * @param dropRequestId The drop request id.
 * @return FlowfileQueuesApiApiRemoveDropRequestRequest
 */
func (a *FlowfileQueuesApiService) RemoveDropRequest(ctx _context.Context, id string, dropRequestId string) FlowfileQueuesApiApiRemoveDropRequestRequest {
	return FlowfileQueuesApiApiRemoveDropRequestRequest{
		ApiService:    a,
		ctx:           ctx,
		id:            id,
		dropRequestId: dropRequestId,
	}
}

/*
 * Execute executes the request
 * @return DropRequestEntity
 */
func (a *FlowfileQueuesApiService) RemoveDropRequestExecute(r FlowfileQueuesApiApiRemoveDropRequestRequest) (DropRequestEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  DropRequestEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowfileQueuesApiService.RemoveDropRequest")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flowfile-queues/{id}/drop-requests/{drop-request-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"drop-request-id"+"}", _neturl.PathEscape(parameterToString(r.dropRequestId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
