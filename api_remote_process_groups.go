/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// RemoteProcessGroupsApiService RemoteProcessGroupsApi service
type RemoteProcessGroupsApiService service

type RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
}

func (r RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest) Execute() (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	return r.ApiService.GetRemoteProcessGroupExecute(r)
}

/*
 * GetRemoteProcessGroup Gets a remote process group
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @return RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest
 */
func (a *RemoteProcessGroupsApiService) GetRemoteProcessGroup(ctx _context.Context, id string) RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest {
	return RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupEntity
 */
func (a *RemoteProcessGroupsApiService) GetRemoteProcessGroupExecute(r RemoteProcessGroupsApiApiGetRemoteProcessGroupRequest) (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.GetRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiGetStateRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
}

func (r RemoteProcessGroupsApiApiGetStateRequest) Execute() (ComponentStateEntity, *_nethttp.Response, error) {
	return r.ApiService.GetStateExecute(r)
}

/*
 * GetState Gets the state for a RemoteProcessGroup
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The processor id.
 * @return RemoteProcessGroupsApiApiGetStateRequest
 */
func (a *RemoteProcessGroupsApiService) GetState(ctx _context.Context, id string) RemoteProcessGroupsApiApiGetStateRequest {
	return RemoteProcessGroupsApiApiGetStateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return ComponentStateEntity
 */
func (a *RemoteProcessGroupsApiService) GetStateExecute(r RemoteProcessGroupsApiApiGetStateRequest) (ComponentStateEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ComponentStateEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.GetState")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/state"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest struct {
	ctx                          _context.Context
	ApiService                   *RemoteProcessGroupsApiService
	id                           string
	version                      *string
	clientId                     *string
	disconnectedNodeAcknowledged *bool
}

func (r RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest) Version(version string) RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest {
	r.version = &version
	return r
}
func (r RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest) ClientId(clientId string) RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest {
	r.clientId = &clientId
	return r
}
func (r RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest) DisconnectedNodeAcknowledged(disconnectedNodeAcknowledged bool) RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest {
	r.disconnectedNodeAcknowledged = &disconnectedNodeAcknowledged
	return r
}

func (r RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest) Execute() (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	return r.ApiService.RemoveRemoteProcessGroupExecute(r)
}

/*
 * RemoveRemoteProcessGroup Deletes a remote process group
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @return RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest
 */
func (a *RemoteProcessGroupsApiService) RemoveRemoteProcessGroup(ctx _context.Context, id string) RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest {
	return RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupEntity
 */
func (a *RemoteProcessGroupsApiService) RemoveRemoteProcessGroupExecute(r RemoteProcessGroupsApiApiRemoveRemoteProcessGroupRequest) (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.RemoveRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.version != nil {
		localVarQueryParams.Add("version", parameterToString(*r.version, ""))
	}
	if r.clientId != nil {
		localVarQueryParams.Add("clientId", parameterToString(*r.clientId, ""))
	}
	if r.disconnectedNodeAcknowledged != nil {
		localVarQueryParams.Add("disconnectedNodeAcknowledged", parameterToString(*r.disconnectedNodeAcknowledged, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	body       *RemoteProcessGroupEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest) Body(body RemoteProcessGroupEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest) Execute() (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupExecute(r)
}

/*
 * UpdateRemoteProcessGroup Updates a remote process group
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroup(ctx _context.Context, id string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRequest) (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroup")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	portId     string
	body       *RemoteProcessGroupPortEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest) Body(body RemoteProcessGroupPortEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest) Execute() (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupInputPortExecute(r)
}

/*
 * UpdateRemoteProcessGroupInputPort Updates a remote port
 * Note: This endpoint is subject to change as NiFi and it's REST API evolve.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @param portId The remote process group port id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupInputPort(ctx _context.Context, id string, portId string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		portId:     portId,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupPortEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupInputPortExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRequest) (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroupInputPort")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/input-ports/{port-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	portId     string
	body       *RemotePortRunStatusEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest) Execute() (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupInputPortRunStatusExecute(r)
}

/*
 * UpdateRemoteProcessGroupInputPortRunStatus Updates run status of a remote port
 * Note: This endpoint is subject to change as NiFi and it's REST API evolve.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @param portId The remote process group port id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupInputPortRunStatus(ctx _context.Context, id string, portId string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		portId:     portId,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupPortEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupInputPortRunStatusExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupInputPortRunStatusRequest) (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroupInputPortRunStatus")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/input-ports/{port-id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	portId     string
	body       *RemoteProcessGroupPortEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest) Body(body RemoteProcessGroupPortEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest) Execute() (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupOutputPortExecute(r)
}

/*
 * UpdateRemoteProcessGroupOutputPort Updates a remote port
 * Note: This endpoint is subject to change as NiFi and it's REST API evolve.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @param portId The remote process group port id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupOutputPort(ctx _context.Context, id string, portId string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		portId:     portId,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupPortEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupOutputPortExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRequest) (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroupOutputPort")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/output-ports/{port-id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	portId     string
	body       *RemotePortRunStatusEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest) Execute() (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupOutputPortRunStatusExecute(r)
}

/*
 * UpdateRemoteProcessGroupOutputPortRunStatus Updates run status of a remote port
 * Note: This endpoint is subject to change as NiFi and it's REST API evolve.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @param portId The remote process group port id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupOutputPortRunStatus(ctx _context.Context, id string, portId string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
		portId:     portId,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupPortEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupOutputPortRunStatusExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupOutputPortRunStatusRequest) (RemoteProcessGroupPortEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupPortEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroupOutputPortRunStatus")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/output-ports/{port-id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"port-id"+"}", _neturl.PathEscape(parameterToString(r.portId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest struct {
	ctx        _context.Context
	ApiService *RemoteProcessGroupsApiService
	id         string
	body       *RemotePortRunStatusEntity
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest) Body(body RemotePortRunStatusEntity) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest {
	r.body = &body
	return r
}

func (r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest) Execute() (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	return r.ApiService.UpdateRemoteProcessGroupRunStatusExecute(r)
}

/*
 * UpdateRemoteProcessGroupRunStatus Updates run status of a remote process group
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id The remote process group id.
 * @return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupRunStatus(ctx _context.Context, id string) RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest {
	return RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 * @return RemoteProcessGroupEntity
 */
func (a *RemoteProcessGroupsApiService) UpdateRemoteProcessGroupRunStatusExecute(r RemoteProcessGroupsApiApiUpdateRemoteProcessGroupRunStatusRequest) (RemoteProcessGroupEntity, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  RemoteProcessGroupEntity
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RemoteProcessGroupsApiService.UpdateRemoteProcessGroupRunStatus")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/remote-process-groups/{id}/run-status"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
