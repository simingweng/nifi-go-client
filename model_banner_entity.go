/*
 * NiFi Rest Api
 *
 * The Rest Api provides programmatic access to command and control a NiFi instance in real time. Start and                                              stop processors, monitor queues, query provenance data, and more. Each endpoint below includes a description,                                             definitions of the expected input and output, potential response codes, and the authorizations required                                             to invoke each service.
 *
 * API version: 1.13.2
 * Contact: dev@nifi.apache.org
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package nifi

import (
	"encoding/json"
)

// BannerEntity struct for BannerEntity
type BannerEntity struct {
	Banners *BannerDTO `json:"banners,omitempty"`
}

// NewBannerEntity instantiates a new BannerEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBannerEntity() *BannerEntity {
	this := BannerEntity{}
	return &this
}

// NewBannerEntityWithDefaults instantiates a new BannerEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBannerEntityWithDefaults() *BannerEntity {
	this := BannerEntity{}
	return &this
}

// GetBanners returns the Banners field value if set, zero value otherwise.
func (o *BannerEntity) GetBanners() BannerDTO {
	if o == nil || o.Banners == nil {
		var ret BannerDTO
		return ret
	}
	return *o.Banners
}

// GetBannersOk returns a tuple with the Banners field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BannerEntity) GetBannersOk() (*BannerDTO, bool) {
	if o == nil || o.Banners == nil {
		return nil, false
	}
	return o.Banners, true
}

// HasBanners returns a boolean if a field has been set.
func (o *BannerEntity) HasBanners() bool {
	if o != nil && o.Banners != nil {
		return true
	}

	return false
}

// SetBanners gets a reference to the given BannerDTO and assigns it to the Banners field.
func (o *BannerEntity) SetBanners(v BannerDTO) {
	o.Banners = &v
}

func (o BannerEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Banners != nil {
		toSerialize["banners"] = o.Banners
	}
	return json.Marshal(toSerialize)
}

type NullableBannerEntity struct {
	value *BannerEntity
	isSet bool
}

func (v NullableBannerEntity) Get() *BannerEntity {
	return v.value
}

func (v *NullableBannerEntity) Set(val *BannerEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableBannerEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableBannerEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBannerEntity(val *BannerEntity) *NullableBannerEntity {
	return &NullableBannerEntity{value: val, isSet: true}
}

func (v NullableBannerEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBannerEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
